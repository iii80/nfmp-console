#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var _ = require('lodash');
var path = require('path');
var async = require('async');
var port = require('../lib/port.lib.js')();
var logger = require('../lib/logger.lib');
var exec = require('child_process').exec;
var localStorage = require('../lib/localStorage.lib');
var hardware = require('../core/controllers/hardware.controller');
var streamService = require('../core/services/stream.service');

/**
 * 设置端口
 */
app.set('port', port);

/**
 * 创建 HTTP 服务器
 */

  var streams = localStorage.getItem('streams');

  if (streams) {
    var streamList = JSON.parse(streams);

    _.forEach(streamList, function (item) {
      if (item.pid && item.cmd) {
        streamService.runCMD(item.id, item.cmd);
      }
    });
  }

  var server = http.createServer(app);
  var io = require('socket.io').listen(server);

  /**
   * 监听端口
   */
  server.listen(port);

  server.on('error', function (error) {
    if (error.syscall !== 'listen') throw error;

    var bind = typeof port === 'string' ? 'pipe ' + port : 'port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        logger.system().error(bind + ' 需要有更高的权限');
        process.exit(1);

        break;
      case 'EADDRINUSE':
        logger.system().error(bind + ' 已被使用');
        process.exit(1);

        break;
      default:
        throw error;
    }
  });

  server.on('listening', function () {
    var addr = server.address();

    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

    logger.system().info('正在监听 ' + bind);
  });

  io.sockets.on('connection', function (socket) {
    hardware.information(socket);

    socket.on('disconnect', function () {
      hardware.disconnect();
    });
  });

  function exit () {
    console.log('进程退出中');

    var streams = localStorage.getItem('streams');

    if (streams) {
      var streamList = JSON.parse(streams);

        _.forEach(streamList, function (item) {
          if (item.pid) {
            exec('kill -s 9 ' + item.pid);
          }
        });
    }

    console.log('所有子进程已杀死');

    process.exit(0);
  }

process.on('SIGINT', exit);
process.on('SIGTERM', exit);